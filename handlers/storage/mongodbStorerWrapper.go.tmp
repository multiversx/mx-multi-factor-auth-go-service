package storage

import (
	"github.com/multiversx/multi-factor-auth-go-service/core"
	"github.com/multiversx/multi-factor-auth-go-service/mongodb"
)

// ArgMongoDBStorerWrapper defines the fields needed to create a new storer wrapper
type ArgMongoDBStorerWrapper struct {
	Storer     core.StorageWithIndex
	Client     mongodb.MongoDBClient
	Marshaller core.Marshaller
}

type mongodbStorerWrapper struct {
	marshaller core.Marshaller
	storer     core.StorageWithIndex
}

func NewMongoDBStorerWrapper(args ArgMongoDBStorerWrapper) (*mongodbStorerWrapper, error) {
	return &mongodbStorerWrapper{
		marshaller: args.Marshaller,
		storer:     args.Storer,
	}, nil
}

func (usw *mongodbStorerWrapper) Load(key []byte) (*core.OTPInfo, error) {
	otpInfo, err := usw.getFromStorage(key)
	if err != nil {
		return nil, err
	}

	return usw.decrypt(otpInfo)
}

func (usw *mongodbStorerWrapper) Save(key []byte, otpInfo *core.OTPInfo) error {
	encryptedOTPInfo, err := usw.encrypt(otpInfo)
	if err != nil {
		return err
	}

	buff, err := usw.marshaller.Marshal(encryptedOTPInfo)
	if err != nil {
		return err
	}

	return usw.storer.Put(key, buff)
}

func (usw *mongodbStorerWrapper) getFromStorage(key []byte) (*core.OTPInfo, error) {
	oldOTPInfo, err := usw.storer.Get(key)
	if err != nil {
		return nil, err
	}

	otpInfo := &core.OTPInfo{}
	err = usw.marshaller.Unmarshal(otpInfo, oldOTPInfo)
	if err != nil {
		return nil, err
	}

	return otpInfo, nil
}

// TODO: implement encryption
func (usw *mongodbStorerWrapper) decrypt(otpInfo *core.OTPInfo) (*core.OTPInfo, error) {
	return otpInfo, nil
}

func (usw *mongodbStorerWrapper) encrypt(otpInfo *core.OTPInfo) (*core.OTPInfo, error) {
	return otpInfo, nil
}

// IsInterfaceNil return true if there is no value under the interface
func (usw *mongodbStorerWrapper) IsInterfaceNil() bool {
	return usw == nil
}
