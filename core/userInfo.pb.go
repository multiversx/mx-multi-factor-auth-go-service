// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: userInfo.proto

package core

import (
	bytes "bytes"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GuardianState represents the state of the guardian
type GuardianState int32

const (
	// NotUsable represents a guardian recently generated but not verified
	NotUsable GuardianState = 0
	// Usable represents a verified guardian
	Usable GuardianState = 1
)

var GuardianState_name = map[int32]string{
	0: "NotUsable",
	1: "Usable",
}

var GuardianState_value = map[string]int32{
	"NotUsable": 0,
	"Usable":    1,
}

func (GuardianState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9abb1e7c7c5082b5, []int{0}
}

// GuardianInfo holds details about a guardian
type GuardianInfo struct {
	PublicKey  []byte        `protobuf:"bytes,1,opt,name=PublicKey,proto3" json:"PublicKey,omitempty"`
	PrivateKey []byte        `protobuf:"bytes,2,opt,name=PrivateKey,proto3" json:"PrivateKey,omitempty"`
	State      GuardianState `protobuf:"varint,3,opt,name=State,proto3,enum=proto.GuardianState" json:"State,omitempty"`
}

func (m *GuardianInfo) Reset()      { *m = GuardianInfo{} }
func (*GuardianInfo) ProtoMessage() {}
func (*GuardianInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_9abb1e7c7c5082b5, []int{0}
}
func (m *GuardianInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GuardianInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GuardianInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GuardianInfo.Merge(m, src)
}
func (m *GuardianInfo) XXX_Size() int {
	return m.Size()
}
func (m *GuardianInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_GuardianInfo.DiscardUnknown(m)
}

var xxx_messageInfo_GuardianInfo proto.InternalMessageInfo

func (m *GuardianInfo) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

func (m *GuardianInfo) GetPrivateKey() []byte {
	if m != nil {
		return m.PrivateKey
	}
	return nil
}

func (m *GuardianInfo) GetState() GuardianState {
	if m != nil {
		return m.State
	}
	return NotUsable
}

// UserInfo holds info about both user's guardians and its unique index
type UserInfo struct {
	Index          uint32       `protobuf:"varint,1,opt,name=Index,proto3" json:"Index,omitempty"`
	FirstGuardian  GuardianInfo `protobuf:"bytes,2,opt,name=FirstGuardian,proto3" json:"FirstGuardian"`
	SecondGuardian GuardianInfo `protobuf:"bytes,3,opt,name=SecondGuardian,proto3" json:"SecondGuardian"`
}

func (m *UserInfo) Reset()      { *m = UserInfo{} }
func (*UserInfo) ProtoMessage() {}
func (*UserInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_9abb1e7c7c5082b5, []int{1}
}
func (m *UserInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *UserInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserInfo.Merge(m, src)
}
func (m *UserInfo) XXX_Size() int {
	return m.Size()
}
func (m *UserInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_UserInfo.DiscardUnknown(m)
}

var xxx_messageInfo_UserInfo proto.InternalMessageInfo

func (m *UserInfo) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *UserInfo) GetFirstGuardian() GuardianInfo {
	if m != nil {
		return m.FirstGuardian
	}
	return GuardianInfo{}
}

func (m *UserInfo) GetSecondGuardian() GuardianInfo {
	if m != nil {
		return m.SecondGuardian
	}
	return GuardianInfo{}
}

// OTPInfo holds the otp along with its last update timestamp
type OTPInfo struct {
	OTP                     []byte `protobuf:"bytes,1,opt,name=OTP,proto3" json:"OTP,omitempty"`
	LastTOTPChangeTimestamp int64  `protobuf:"varint,2,opt,name=LastTOTPChangeTimestamp,proto3" json:"LastTOTPChangeTimestamp,omitempty"`
}

func (m *OTPInfo) Reset()      { *m = OTPInfo{} }
func (*OTPInfo) ProtoMessage() {}
func (*OTPInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_9abb1e7c7c5082b5, []int{2}
}
func (m *OTPInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OTPInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *OTPInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OTPInfo.Merge(m, src)
}
func (m *OTPInfo) XXX_Size() int {
	return m.Size()
}
func (m *OTPInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_OTPInfo.DiscardUnknown(m)
}

var xxx_messageInfo_OTPInfo proto.InternalMessageInfo

func (m *OTPInfo) GetOTP() []byte {
	if m != nil {
		return m.OTP
	}
	return nil
}

func (m *OTPInfo) GetLastTOTPChangeTimestamp() int64 {
	if m != nil {
		return m.LastTOTPChangeTimestamp
	}
	return 0
}

func init() {
	proto.RegisterEnum("proto.GuardianState", GuardianState_name, GuardianState_value)
	proto.RegisterType((*GuardianInfo)(nil), "proto.GuardianInfo")
	proto.RegisterType((*UserInfo)(nil), "proto.UserInfo")
	proto.RegisterType((*OTPInfo)(nil), "proto.OTPInfo")
}

func init() { proto.RegisterFile("userInfo.proto", fileDescriptor_9abb1e7c7c5082b5) }

var fileDescriptor_9abb1e7c7c5082b5 = []byte{
	// 377 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x50, 0x41, 0x8b, 0xda, 0x40,
	0x14, 0x9e, 0x69, 0xd4, 0xd6, 0x57, 0x23, 0x32, 0x15, 0x2a, 0xa5, 0x4c, 0xc5, 0x93, 0x08, 0x55,
	0xb0, 0x97, 0x9e, 0x5a, 0x6a, 0xa1, 0x45, 0x5a, 0x6a, 0x88, 0xf1, 0xd2, 0xdb, 0x24, 0x8e, 0x31,
	0xa0, 0x19, 0x49, 0x26, 0xc5, 0xde, 0xfa, 0x13, 0xfa, 0x23, 0xf6, 0xb0, 0x3f, 0xc5, 0xa3, 0x47,
	0x4f, 0xcb, 0x3a, 0x5e, 0xf6, 0xe8, 0x4f, 0x58, 0x32, 0xd1, 0xdd, 0x55, 0x58, 0xf6, 0x34, 0xef,
	0x7d, 0xdf, 0x7c, 0xdf, 0xf7, 0xde, 0x83, 0x72, 0x12, 0xf3, 0xa8, 0x1f, 0x4e, 0x44, 0x7b, 0x11,
	0x09, 0x29, 0x48, 0x5e, 0x3f, 0x6f, 0xde, 0xfb, 0x81, 0x9c, 0x26, 0x6e, 0xdb, 0x13, 0xf3, 0x8e,
	0x2f, 0x7c, 0xd1, 0xd1, 0xb0, 0x9b, 0x4c, 0x74, 0xa7, 0x1b, 0x5d, 0x65, 0xaa, 0xc6, 0x12, 0x4a,
	0xdf, 0x13, 0x16, 0x8d, 0x03, 0x16, 0xa6, 0x5e, 0xe4, 0x2d, 0x14, 0xad, 0xc4, 0x9d, 0x05, 0xde,
	0x0f, 0xfe, 0xb7, 0x86, 0xeb, 0xb8, 0x59, 0xb2, 0xef, 0x01, 0x42, 0x01, 0xac, 0x28, 0xf8, 0xc3,
	0x24, 0x4f, 0xe9, 0x67, 0x9a, 0x7e, 0x80, 0x90, 0x16, 0xe4, 0x87, 0x92, 0x49, 0x5e, 0x33, 0xea,
	0xb8, 0x59, 0xee, 0x56, 0xb3, 0x90, 0xf6, 0x31, 0x41, 0x73, 0x76, 0xf6, 0xa5, 0x71, 0x81, 0xe1,
	0xc5, 0xe8, 0xb0, 0x02, 0xa9, 0x42, 0xbe, 0x1f, 0x8e, 0xf9, 0x52, 0x47, 0x9a, 0x76, 0xd6, 0x90,
	0xcf, 0x60, 0x7e, 0x0b, 0xa2, 0x58, 0x1e, 0xf5, 0x3a, 0xf1, 0x65, 0xf7, 0xd5, 0x99, 0x6d, 0xea,
	0xd0, 0xcb, 0xad, 0xae, 0xde, 0x21, 0xfb, 0xf4, 0x3f, 0xf9, 0x02, 0xe5, 0x21, 0xf7, 0x44, 0x38,
	0xbe, 0x73, 0x30, 0x9e, 0x72, 0x38, 0x13, 0x34, 0x46, 0xf0, 0x7c, 0xe0, 0x58, 0x7a, 0xc8, 0x0a,
	0x18, 0x03, 0xc7, 0x3a, 0x5c, 0x25, 0x2d, 0xc9, 0x47, 0x78, 0xfd, 0x93, 0xc5, 0xd2, 0x19, 0x38,
	0xd6, 0xd7, 0x29, 0x0b, 0x7d, 0xee, 0x04, 0x73, 0x1e, 0x4b, 0x36, 0x5f, 0xe8, 0x51, 0x0d, 0xfb,
	0x31, 0xba, 0xd5, 0x02, 0xf3, 0xe4, 0x2a, 0xc4, 0x84, 0xe2, 0x2f, 0x21, 0x47, 0x31, 0x73, 0x67,
	0xbc, 0x82, 0x08, 0x40, 0xe1, 0x50, 0xe3, 0xde, 0xa7, 0xf5, 0x96, 0xa2, 0xcd, 0x96, 0xa2, 0xfd,
	0x96, 0xe2, 0x7f, 0x8a, 0xe2, 0x4b, 0x45, 0xf1, 0x4a, 0x51, 0xbc, 0x56, 0x14, 0x6f, 0x14, 0xc5,
	0xd7, 0x8a, 0xe2, 0x1b, 0x45, 0xd1, 0x5e, 0x51, 0xfc, 0x7f, 0x47, 0xd1, 0x7a, 0x47, 0xd1, 0x66,
	0x47, 0xd1, 0xef, 0x9c, 0x27, 0x22, 0xee, 0x16, 0xf4, 0xb2, 0x1f, 0x6e, 0x03, 0x00, 0x00, 0xff,
	0xff, 0x5c, 0x81, 0x7f, 0x4c, 0x32, 0x02, 0x00, 0x00,
}

func (x GuardianState) String() string {
	s, ok := GuardianState_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *GuardianInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GuardianInfo)
	if !ok {
		that2, ok := that.(GuardianInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.PublicKey, that1.PublicKey) {
		return false
	}
	if !bytes.Equal(this.PrivateKey, that1.PrivateKey) {
		return false
	}
	if this.State != that1.State {
		return false
	}
	return true
}
func (this *UserInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UserInfo)
	if !ok {
		that2, ok := that.(UserInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Index != that1.Index {
		return false
	}
	if !this.FirstGuardian.Equal(&that1.FirstGuardian) {
		return false
	}
	if !this.SecondGuardian.Equal(&that1.SecondGuardian) {
		return false
	}
	return true
}
func (this *OTPInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OTPInfo)
	if !ok {
		that2, ok := that.(OTPInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.OTP, that1.OTP) {
		return false
	}
	if this.LastTOTPChangeTimestamp != that1.LastTOTPChangeTimestamp {
		return false
	}
	return true
}
func (this *GuardianInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&core.GuardianInfo{")
	s = append(s, "PublicKey: "+fmt.Sprintf("%#v", this.PublicKey)+",\n")
	s = append(s, "PrivateKey: "+fmt.Sprintf("%#v", this.PrivateKey)+",\n")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UserInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&core.UserInfo{")
	s = append(s, "Index: "+fmt.Sprintf("%#v", this.Index)+",\n")
	s = append(s, "FirstGuardian: "+strings.Replace(this.FirstGuardian.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "SecondGuardian: "+strings.Replace(this.SecondGuardian.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OTPInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&core.OTPInfo{")
	s = append(s, "OTP: "+fmt.Sprintf("%#v", this.OTP)+",\n")
	s = append(s, "LastTOTPChangeTimestamp: "+fmt.Sprintf("%#v", this.LastTOTPChangeTimestamp)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringUserInfo(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *GuardianInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuardianInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GuardianInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.State != 0 {
		i = encodeVarintUserInfo(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x18
	}
	if len(m.PrivateKey) > 0 {
		i -= len(m.PrivateKey)
		copy(dAtA[i:], m.PrivateKey)
		i = encodeVarintUserInfo(dAtA, i, uint64(len(m.PrivateKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PublicKey) > 0 {
		i -= len(m.PublicKey)
		copy(dAtA[i:], m.PublicKey)
		i = encodeVarintUserInfo(dAtA, i, uint64(len(m.PublicKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UserInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.SecondGuardian.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintUserInfo(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.FirstGuardian.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintUserInfo(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.Index != 0 {
		i = encodeVarintUserInfo(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *OTPInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OTPInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OTPInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastTOTPChangeTimestamp != 0 {
		i = encodeVarintUserInfo(dAtA, i, uint64(m.LastTOTPChangeTimestamp))
		i--
		dAtA[i] = 0x10
	}
	if len(m.OTP) > 0 {
		i -= len(m.OTP)
		copy(dAtA[i:], m.OTP)
		i = encodeVarintUserInfo(dAtA, i, uint64(len(m.OTP)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintUserInfo(dAtA []byte, offset int, v uint64) int {
	offset -= sovUserInfo(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GuardianInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovUserInfo(uint64(l))
	}
	l = len(m.PrivateKey)
	if l > 0 {
		n += 1 + l + sovUserInfo(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovUserInfo(uint64(m.State))
	}
	return n
}

func (m *UserInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Index != 0 {
		n += 1 + sovUserInfo(uint64(m.Index))
	}
	l = m.FirstGuardian.Size()
	n += 1 + l + sovUserInfo(uint64(l))
	l = m.SecondGuardian.Size()
	n += 1 + l + sovUserInfo(uint64(l))
	return n
}

func (m *OTPInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OTP)
	if l > 0 {
		n += 1 + l + sovUserInfo(uint64(l))
	}
	if m.LastTOTPChangeTimestamp != 0 {
		n += 1 + sovUserInfo(uint64(m.LastTOTPChangeTimestamp))
	}
	return n
}

func sovUserInfo(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozUserInfo(x uint64) (n int) {
	return sovUserInfo(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *GuardianInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GuardianInfo{`,
		`PublicKey:` + fmt.Sprintf("%v", this.PublicKey) + `,`,
		`PrivateKey:` + fmt.Sprintf("%v", this.PrivateKey) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UserInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UserInfo{`,
		`Index:` + fmt.Sprintf("%v", this.Index) + `,`,
		`FirstGuardian:` + strings.Replace(strings.Replace(this.FirstGuardian.String(), "GuardianInfo", "GuardianInfo", 1), `&`, ``, 1) + `,`,
		`SecondGuardian:` + strings.Replace(strings.Replace(this.SecondGuardian.String(), "GuardianInfo", "GuardianInfo", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OTPInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OTPInfo{`,
		`OTP:` + fmt.Sprintf("%v", this.OTP) + `,`,
		`LastTOTPChangeTimestamp:` + fmt.Sprintf("%v", this.LastTOTPChangeTimestamp) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringUserInfo(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *GuardianInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserInfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GuardianInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GuardianInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthUserInfo
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthUserInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = append(m.PublicKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PublicKey == nil {
				m.PublicKey = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivateKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthUserInfo
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthUserInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrivateKey = append(m.PrivateKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PrivateKey == nil {
				m.PrivateKey = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= GuardianState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserInfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserInfo
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUserInfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserInfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstGuardian", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserInfo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUserInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FirstGuardian.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecondGuardian", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserInfo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUserInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SecondGuardian.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserInfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserInfo
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUserInfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OTPInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserInfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OTPInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OTPInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OTP", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthUserInfo
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthUserInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OTP = append(m.OTP[:0], dAtA[iNdEx:postIndex]...)
			if m.OTP == nil {
				m.OTP = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastTOTPChangeTimestamp", wireType)
			}
			m.LastTOTPChangeTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastTOTPChangeTimestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserInfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserInfo
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUserInfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipUserInfo(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowUserInfo
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUserInfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUserInfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthUserInfo
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupUserInfo
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthUserInfo
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthUserInfo        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowUserInfo          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupUserInfo = fmt.Errorf("proto: unexpected end of group")
)
